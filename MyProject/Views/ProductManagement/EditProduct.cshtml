@model MyProject.Models.ViewModels.EditProductViewModel
@using System.Collections
@using MyProject.Helper;
@using MyProject.Models.ShoppingCart

@{
    ViewBag.Title = "Edit Product";
    ViewBag.DisabledProductCode = true;
}

<script src="/Scripts/jquery-2.2.0.min.js" type="text/javascript"></script>

<script type="text/javascript">
    window.onload = function () {
        CKEDITOR.replace('detailDescriptionTextBox');
        CKEDITOR.replace('noteTextArea');
    };


    function convertToVND() {
        var rate = $('#currencyRate').text();
        var nodes = document.getElementsByClassName('amountPricing');
        var convertRate = parseFloat(rate).toFixed(2);
            for (var i = 0; i < nodes.length; i++) {
                //console.log(nodes[i].value);
                //console.log();
                var vnd = convertRate * nodes[i].value;
                nodes[i].value = vnd;
            }
        var buyInAmount = document.getElementById('buyIn').value;
        document.getElementById('buyIn').value = buyInAmount * convertRate;

    }
    function convertToUSD() {
        var rate = $('#currencyRate').text();
        var nodes = document.getElementsByClassName('amountPricing');
        var convertRate = parseFloat(rate).toFixed(2);
        for (var i = 0; i < nodes.length; i++) {
            //console.log(nodes[i].value);
            //console.log();
            var vnd = nodes[i].value / convertRate;
            nodes[i].value = vnd;
        }
        var buyInAmount = document.getElementById('buyIn').value;
        document.getElementById('buyIn').value = buyInAmount / convertRate;

    }

    function calProfit() {
        var nodes = document.getElementsByClassName('amountPricing');
        var retailAmt = 0;
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].id === "amount_1") {
                retailAmt = parseFloat(nodes[i].value).toFixed(2);

            }
        }
        var buyIn = parseFloat(document.getElementById('buyIn').value).toFixed(2);
        var profit = retailAmt - buyIn;
        //$('profit').text = profit.toFixed(2);
        var rate = $('#currencyRate').text();
        var convertRate = parseFloat(rate).toFixed(2);
        profit = (profit / convertRate).toFixed(2);
        $('.profit span').html(profit);
    }

</script>

<body>
    <section id="ProductForm">
        @using (Html.BeginForm("EditProduct", "ProductManagement", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="row">
                <hr>
            <div class="medium-6 columns">
                 @Html.ActionLink("<<< Back", "Index", "ProductManagement", new { id = -1 }, new { @style = "color: #32cd32" })
                <br/>
                @{
            if (Model.ProductView.Image != null)
            {
                var base64 = Convert.ToBase64String(@Model.ProductView.Image);
                var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                        <img alt="@Model.ProductView.Description" src="@imgSrc" height="400" width="400"/>
            }
            else
            {
                        <img src="~/Content/Images/ProductDefault.png" height="400" width="400"/>
            }}
                <div class="form-group">
                    @*                        @Html.LabelFor(m => m.UserProfilePicture, new {@class = "col-md-2 control-label"})*@
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.ProductView.ProductImage, new { type = "file" })
                        @Html.ValidationMessage("CustomMessage")
                    </div>
                </div>
                <ul class="small-block-grid-3">
                    <li>

                        @{
            if (Model.ProductView.ImageAlt0 != null)
            {
                var base64 = Convert.ToBase64String(@Model.ProductView.ImageAlt0);
                var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                                <img alt="@Model.ProductView.Description" src="@imgSrc" height="400" width="400"/>
            }
            else
            {
                                <img src="~/Content/Images/ProductDefault.png" height="100" width="100"/>
            }}
                        <div class="form-group">
                            @*                        @Html.LabelFor(m => m.UserProfilePicture, new {@class = "col-md-2 control-label"})*@
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.ProductView.ProductImageAlt0, new { type = "file" })
                                @Html.ValidationMessage("CustomMessage")
                            </div>
                        </div>
                    </li>

                    <li>

                        @{
            if (Model.ProductView.ImageAlt1 != null)
            {
                var base64 = Convert.ToBase64String(@Model.ProductView.ImageAlt1);
                var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                                <img alt="@Model.ProductView.Description" src="@imgSrc" height="400" width="400"/>
            }
            else
            {
                                <img src="~/Content/Images/ProductDefault.png" height="100" width="100"/>
            }}
                        <div class="form-group">
                            @*                        @Html.LabelFor(m => m.UserProfilePicture, new {@class = "col-md-2 control-label"})*@
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.ProductView.ProductImageAlt1, new { type = "file" })
                                @Html.ValidationMessage("CustomMessage")
                            </div>
                        </div>
                    </li>
                </ul>
            </div>


                <div class="large-5 columns">

                    <ul class="tabs" data-tab>
                        <li class="tab-title active"><a href="#panel1">Details</a></li>
                        <li class="tab-title"><a href="#panel2">Pricing</a></li>
                        <li class="tab-title"><a href="#panel3">Stock/Weight</a></li>
                        <li class="tab-title"><a href="#panel4">Additional Info</a></li>
                    </ul>
                    <div class="tabs-content">
                        <div class="content active" id="panel1">

                            <div class="form-group">
                                @Html.LabelFor(m => m.ProductView.Code, new { @class = "col-md-2 control-label" })
                                @Html.DisplayTextFor(m => m.ProductView.Code)
                                @*                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.ProductView.Code, ViewBag.DisabledProductCode ? (object)new { disabled="disabled" } : new {})
                            @Html.ValidationMessageFor(m => m.ProductView.Code, "", new { @class = "text-danger" })
                        </div>*@
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.ProductView.Active)
                                @Html.CheckBoxFor(m => m.ProductView.Active)
                                @Html.HiddenFor(m => m.ProductView.Active)
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.ProductView.Description, new { @class = "col-md-2 control-label" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(m => m.ProductView.Description)
                                    @Html.ValidationMessageFor(m => m.ProductView.Description, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.ProductView.ReviewVideoUrl, new { @class = "col-md-2 control-label" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(m => m.ProductView.ReviewVideoUrl)
                                    @Html.ValidationMessageFor(m => m.ProductView.ReviewVideoUrl, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.ProductView.DetailDescription, new { @class = "col-md-2 control-label" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(m => m.ProductView.DetailDescription, new { id = "detailDescriptionTextBox", Value = Model.ProductView.DetailDescription, @class = "fill" })
                                    @Html.ValidationMessageFor(m => m.ProductView.DetailDescription, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>


                        <div class="content" id="panel2">
                            <div class="panel" >
                                <h5><b><em>Pricing (Save in VND !!) </em></b></h5>

                                @for (int i = 0; i < Model.Offers.Count; i++)
                                {
                                    var priceType = "";
                                    switch (Model.Offers[i].PriceTypeId)
                                    {
                                        case 1:
                                            priceType = "Retail";
                                            break;
                                        case 2:
                                            priceType = "Whole Sale";
                                            break;
                                        case 3:
                                            priceType = "Original Price";
                                            break;
                                        default:
                                            priceType = "Unknown";
                                            break;
                                    }
                                    <div class="form-group" id="price">
                                        <h6>@priceType</h6>
                                            @Html.TextBoxFor(m => m.Offers[i].Price, new { @class = "amountPricing", id = "amount_" + Model.Offers[i].PriceTypeId, onchange = "calProfit();" })
                                            @Html.HiddenFor(m => m.Offers[i].Price)
                                            @Html.HiddenFor(m => m.Offers[i].PriceTypeId)
                                            @*@Html.ValidationMessageFor(m => Model.Offers[i].Price, "", new { @class = "text-danger" })*@
@*                                        <div class="col-md-10" id="priceVal">

                                        </div>*@
                                    </div>
                                }
                            </div>

                            <div class="panel">
                                <h5><b><em>Purchase Price (Save in VND !!) </em></b></h5>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ProductView.BuyInPrice, new { @class = "col-md-2 control-label" })
                                    <div class="col-md-10">
                                        @Html.TextBoxFor(m => m.ProductView.BuyInPrice, new { @id = "buyIn" })
                                        @Html.ValidationMessageFor(m => m.ProductView.BuyInPrice, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="panel profit">
                                <h5><b><em>Profit (in USD)</em></b></h5>
                                <b><span style="color: #ff4500">Unknown</span></b>
                            </div>

                            <div class="panel">
                                <h5><b><em>Currency Conversion</em></b></h5>
                                <div >
                                    Rate: 1usd = <span style="color: #800000" id="currencyRate">@Model.ProductView.ConversionRate </span> vnd
                                </div>

                                <br/>
                                <div>
                                    <input class="small button" value="Convert to VND" id="toVND" onclick=" convertToVND() "/>
                                    <input class="small button" value="Convert to USD" id="toUSD" onclick="convertToUSD()"/>
                                </div>
@*                                <div class="switch">
                                    <h6>Switch on to convert to VND</h6>
                                    <input id="currencyConversion" type="checkbox" onclick='convertBoxCheck(this);'>
                                    <label for="currencyConversion"></label>
                                </div> *@
                            </div>
                        </div>


                        <div class="content" id="panel3">
                            <div class="panel">
                                <h5><b><em>Weight: </em></b></h5>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ProductView.WeightPounds, new { @class = "col-md-2 control-label" })
                                    <div class="col-md-10">
                                        @Html.TextBoxFor(m => m.ProductView.WeightPounds)
                                        @Html.ValidationMessageFor(m => m.ProductView.WeightPounds, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.ProductView.WeightOunce, new { @class = "col-md-2 control-label" })
                                    <div class="col-md-10">
                                        @Html.TextBoxFor(m => m.ProductView.WeightOunce)
                                        @Html.ValidationMessageFor(m => m.ProductView.WeightOunce, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="panel">
                                <h5><b><em>Quantity: </em></b></h5>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ProductView.QuantityOnHand, new { @class = "col-md-2 control-label" })
                                    <div class="col-md-10">
                                        @Html.TextBoxFor(m => m.ProductView.QuantityOnHand)
                                        @Html.ValidationMessageFor(m => m.ProductView.QuantityOnHand, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="panel">
                                <h5><b><em>Category: </em></b></h5>
                               @for (int i = 0; i < Model.Categories.Count; i++)
                               {
                                     @*@Html.CheckBoxFor(m => m.Categories[i].IsChecked)<span>@Model.Categories[i].Description</span>
                                    @Html.HiddenFor(m => m.Categories[i].IsChecked)
                                    @Html.HiddenFor(m => m.Categories[i].Code)
                                    <br />*@


                                   var cat = Model.Categories[i];


                                   if (cat.ParentId == 0)
                                   {
                                       <div>
                                           <div>
                                               <span style="font-size: 20px; font-family: Arial; color: #ff4500">@cat.Description &nbsp;&nbsp;&nbsp;&nbsp;</span>
                                               
                                           </div>
                                           <div>
                                               @{
                                                   var children = Model.Categories.Where(c1 => c1.ParentId == cat.Id).ToList();
                                                   
                                                   for (int j = 0 ; j < children.Count; j++)
                                                   {
                                                       var index = Model.Categories.FindIndex(c2 => c2.Id == children[j].Id);
                                                       @Html.CheckBoxFor(m => m.Categories[index].IsChecked)<span>@Model.Categories[index].Description</span>

                                                       var subs = Model.Categories.Where(c3 => c3.ParentId == children[j].Id).ToList();
                                                       if (subs.Count > 0)
                                                       {
                                                           <br/>
                                                           foreach (var sub in subs)
                                                           {
                                                               index = Model.Categories.FindIndex(c2 => c2.Id == sub.Id);
                                                               <span>&nbsp; &nbsp; &nbsp; &nbsp;</span>@Html.CheckBoxFor(m => m.Categories[index].IsChecked)<span>@Model.Categories[index].Description</span>
                                                                <br/>
                                                           }
                                                       }
                                                       @*
                                                       @Html.HiddenFor(m => m.Categories[index].IsChecked)
                                                       @Html.HiddenFor(m => m.Categories[index].Code)
                                                       *@
                                                       <br/>
                                                   }
                                               }

                                           </div>
                                           ================
                                       </div>
                                   }
                                    @Html.HiddenFor(m => m.Categories[i].IsChecked)
                                    @Html.HiddenFor(m => m.Categories[i].Code)
                               }
                            </div>
                        </div>

                        <div class="content" id="panel4">
                            <div class="panel">
                                <h5><b><em>Note: </em></b></h5>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ProductView.Notes, new { @class = "col-md-2 control-label" })
                                    <div class="col-md-10">
                                        @Html.TextAreaFor(m => m.ProductView.Notes, new { id = "noteTextArea" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div>
                        <input type="submit" class="medium success button" value="Save" />
                    </div>
                </div>
            </div>
        }
    </section>

</body>

